generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(uuid())
  name             String
  email            String                @unique
  phone            String?               @unique
  passwordHash     String
  role             Role                  @default(STUDENT)
  createdAt        DateTime              @default(now())
  age              Int?
  resetToken       String?
  resetTokenExp    DateTime?
  dateOfBirth      DateTime?
  emailVerifiedAt  DateTime?
  phoneVerifiedAt  DateTime?
  otpCode          String?
  otpExpiresAt     DateTime?
  photoUrl         String?
  meetingRequests  MeetingRequest[]
  monthlyPurchases MonthlyPurchase[]
  notifications    NotificationReceipt[]
  purchases        Purchase[]

  @@index([role])
  @@index([createdAt])
  @@index([emailVerifiedAt])
  @@index([phoneVerifiedAt])
}

model Course {
  id               String            @id @default(uuid())
  title            String
  slug             String            @unique
  imageUrl         String?
  shortDesc        String
  longDesc         String
  duration         String?
  startDate        DateTime?
  roadmapJson      Json?
  syllabusJson     Json?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  aboutCourse      String?
  courseIncludes   Json?
  endDate          DateTime?
  language         String            @default("bengali")
  modulesJson      Json?
  numberOfLectures Int?
  numberOfModules  Int?
  numberOfStudents Int?              @default(0)
  starRating       Float?            @default(0.0)
  durationMonths   Int?
  isMonthlyPayment Boolean           @default(false)
  priceRupees      Decimal           @db.Decimal(10, 2)
  monthlyFeeRupees Decimal?          @db.Decimal(10, 2)
  programmingLanguage String?        @default("C++")
  classSchedule    String?           @default("[Monday, Wednesday, Saturday, Sunday]")
  classTimings     String?           @default("8:30pm - 11pm")
  announcements    Announcement[]
  coupons          Coupon[]
  monthlyPurchases MonthlyPurchase[]
  purchases        Purchase[]
  testimonials     Testimonial[]
  content          CourseContent[]

  @@index([isActive])
  @@index([slug])
}

model Purchase {
  id                String   @id @default(uuid())
  userId            String
  courseId          String
  status            String
  createdAt         DateTime @default(now())
  isMonthlyPayment  Boolean  @default(false)
  monthNumber       Int?
  totalMonths       Int?
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  updatedAt         DateTime @default(now()) @updatedAt
  amountRupees      Decimal  @db.Decimal(10, 2)
  course            Course   @relation(fields: [courseId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, createdAt])
  @@index([courseId])
  @@index([status])
  @@index([userId, status])
  @@index([razorpayOrderId])
  @@index([razorpayPaymentId])
}

model MonthlyPurchase {
  id           String    @id @default(uuid())
  userId       String
  courseId     String
  monthNumber  Int
  status       String
  dueDate      DateTime
  paidAt       DateTime?
  createdAt    DateTime  @default(now())
  amountRupees Decimal   @db.Decimal(10, 2)
  course       Course    @relation(fields: [courseId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([userId, status])
  @@index([courseId, monthNumber])
  @@index([dueDate])
}

model Webinar {
  id          String   @id @default(uuid())
  title       String
  description String?
  presenter   String?
  startTime   DateTime
  joinLink    String?
  createdAt   DateTime @default(now())
  imageUrl    String?

  @@index([startTime])
  @@index([createdAt])
}

model Announcement {
  id        String                @id @default(uuid())
  title     String
  body      String
  createdAt DateTime              @default(now())
  courseId  String?
  course    Course?               @relation(fields: [courseId], references: [id])
  receipts  NotificationReceipt[]

  @@index([courseId])
  @@index([createdAt])
}

model NotificationReceipt {
  id             String       @id @default(uuid())
  userId         String
  announcementId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, isRead])
  @@index([announcementId])
}

model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Int
  courseId        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  course          Course   @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([isActive])
}

model Testimonial {
  id           String   @id @default(uuid())
  studentName  String
  studentImage String?
  comment      String
  rating       Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  courseId     String?
  studentAbout String?
  course       Course?  @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([isActive])
  @@index([createdAt])
}

model MeetingRequest {
  id            String        @id @default(uuid())
  userId        String
  studentName   String
  studentEmail  String
  preferredDate DateTime
  preferredTime String
  message       String?
  status        MeetingStatus @default(PENDING)
  adminMessage  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model CourseContent {
  id          String   @id @default(cuid())
  courseId    String
  monthNumber Int
  topicName   String
  videoLink   String?
  githubRepo  String?
  notes       String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([courseId, monthNumber])
  @@index([courseId, monthNumber, order])
  @@map("course_content")
}

model YouTubeVideo {
  id           String   @id @default(uuid())
  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  duration     String?
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isActive])
  @@index([order])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum MeetingStatus {
  PENDING
  APPROVED
  DECLINED
}

model UniqueVisitor {
  id        String   @id @default(uuid())
  ipAddress String
  userAgent String?
  date      DateTime @default(now()) @db.Date
  createdAt DateTime @default(now())

  @@unique([ipAddress, date])
  @@index([date])
  @@index([ipAddress])
}
