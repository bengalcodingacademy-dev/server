generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: When using CloudFront + private S3, ensure your CloudFront distribution
// uses an Origin Access Control (OAC) and your bucket policy allows that OAC.

model User {
  id            String                 @id @default(uuid())
  name          String
  email         String                 @unique
  passwordHash  String
  role          Role                   @default(STUDENT)
  age           Int?
  dateOfBirth   DateTime?
  emailVerifiedAt DateTime?
  otpCode       String?
  otpExpiresAt  DateTime?
  photoUrl      String?
  resetToken    String?
  resetTokenExp DateTime?
  createdAt     DateTime               @default(now())
  purchases     Purchase[]
  monthlyPurchases MonthlyPurchase[]
  notifications NotificationReceipt[]
  meetingRequests MeetingRequest[]

  @@index([role])
  @@index([createdAt])
  @@index([emailVerifiedAt])
}


enum Role {
  USER
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Course {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  imageUrl     String?
  priceCents   Int
  shortDesc    String
  longDesc     String
  duration     String?
  startDate    DateTime?
  endDate      DateTime?
  roadmapJson  Json?
  syllabusJson Json?
  // New fields for enhanced course management
  numberOfModules Int?
  modulesJson  Json?     // Key-value pairs for module names and content
  numberOfLectures Int?
  language     String    @default("bengali") // english, hindi, bengali
  starRating   Float?    @default(0.0)
  numberOfStudents Int?  @default(0)
  aboutCourse  String?   // Rich text content
  courseIncludes Json?   // Array of course inclusions
  // Monthly payment fields
  durationMonths Int?    // Number of months for the course
  monthlyFeeCents Int?   // Monthly fee in cents
  isMonthlyPayment Boolean @default(false) // Whether course uses monthly payment
  testimonials Testimonial[]
  announcements Announcement[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  purchases    Purchase[]
  monthlyPurchases MonthlyPurchase[]
  coupons      Coupon[]
  content      CourseContent[]

  @@index([isActive])
  @@index([slug])
}

model Purchase {
  id           String   @id @default(uuid())
  userId       String
  courseId     String
  amountCents  Int
  status       String
  upiMobile    String?
  upiTxnId     String?
  // Monthly payment fields
  isMonthlyPayment Boolean @default(false)
  monthNumber  Int?      // For monthly payments: 1, 2, 3, etc.
  totalMonths  Int?      // Total months for the course
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  course       Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([userId, createdAt])
  @@index([courseId])
  @@index([status])
  @@index([userId, status])
}

model MonthlyPurchase {
  id           String   @id @default(uuid())
  userId       String
  courseId     String
  monthNumber  Int      // 1, 2, 3, etc. for which month this payment is for
  amountCents  Int      // Monthly fee amount
  status       String   // PENDING, PAID, OVERDUE
  upiMobile    String?
  upiTxnId     String?
  dueDate      DateTime // When this month's payment is due
  paidAt       DateTime? // When payment was completed
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  course       Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([userId, status])
  @@index([courseId, monthNumber])
  @@index([dueDate])
}

model Webinar {
  id          String   @id @default(uuid())
  title       String
  description String?
  presenter   String?
  startTime   DateTime
  joinLink    String?
  imageUrl    String?
  createdAt   DateTime @default(now())

  @@index([startTime])
  @@index([createdAt])
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  body      String
  courseId  String?
  createdAt DateTime @default(now())
  receipts  NotificationReceipt[]
  course    Course?  @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([createdAt])
}

model NotificationReceipt {
  id             String        @id @default(uuid())
  userId         String
  announcementId String
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  announcement   Announcement  @relation(fields: [announcementId], references: [id])

  @@index([userId])
  @@index([userId, isRead])
  @@index([announcementId])
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  discountPercent Int
  courseId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  course      Course   @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([isActive])
}

model Testimonial {
  id        String   @id @default(uuid())
  studentName String
  studentImage String?
  studentAbout String? // About the student
  comment   String
  rating    Int      // 1-5 stars
  courseId  String?  // Link to course (optional)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  course    Course?  @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([isActive])
  @@index([createdAt])
}

model MeetingRequest {
  id          String   @id @default(uuid())
  userId      String
  studentName String
  studentEmail String
  preferredDate DateTime
  preferredTime String
  message     String?
  status      MeetingStatus @default(PENDING)
  adminMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum MeetingStatus {
  PENDING
  APPROVED
  DECLINED
}

model CourseContent {
  id          String   @id @default(cuid())
  courseId    String
  monthNumber Int      // Which month this content belongs to (1, 2, 3, etc.)
  topicName   String   // Name of the topic/section
  videoLink   String?  // Link to video recording
  githubRepo  String?  // Link to GitHub repository
  notes       String?  // Additional notes/content
  order       Int      @default(0) // Order of topics within the month
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([courseId, monthNumber])
  @@index([courseId, monthNumber, order])

  @@map("course_content")
}

