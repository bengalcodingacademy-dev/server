name: Deploy Backend to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Copy files to DigitalOcean
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          source: "./**"
          target: "~/backend-app"
          timeout: 300s
          command_timeout: 300s

      - name: Setup and Deploy Backend on DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          timeout: 600s
          command_timeout: 600s
          script: |
            # Skip system updates and installations if already present
            echo "Checking system requirements..."

            # Only install if not present
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js already installed"
            fi

            if ! command -v pm2 >/dev/null 2>&1; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            else
              echo "PM2 already installed"
            fi

            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing Nginx and Certbot..."
              sudo apt-get update -y
              sudo apt-get install -y nginx certbot python3-certbot-nginx
            else
              echo "Nginx already installed"
            fi

            # Go to backend directory
            cd ~/backend-app

            # Write environment variables
            cat > .env <<EOL
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PORT=${{ secrets.PORT }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            MAIL_FROM=${{ secrets.MAIL_FROM }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_BUCKET=${{ secrets.S3_BUCKET }}
            S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
            S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
            S3_PUBLIC_BASE=${{ secrets.S3_PUBLIC_BASE }}
            RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}
            RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}
            EOL

            # Install dependencies (skip if node_modules exists and package-lock.json is newer)
            if [ ! -d "node_modules" ] || [ "package-lock.json" -nt "node_modules" ]; then
              echo "Installing dependencies..."
              npm ci
            else
              echo "Dependencies already up to date"
            fi

            # Generate Prisma client
            npx prisma generate --schema=prisma/schema.prisma

            # Run migrations in production-safe way
            npx prisma migrate deploy

            # Configure Nginx
            sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/api.bengalcodingacademy.com /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl restart nginx

            # Skip SSL certificate management - certificates are managed separately
            echo "Skipping SSL certificate management to avoid rate limits..."
            echo "SSL certificates should be managed manually or through separate process"
            # Configure SSL for API subdomain
            echo "Configuring SSL for API subdomain..."

            # Check if we can use the main domain certificate (which might include the API subdomain)
            if [ -f "/etc/letsencrypt/live/bengalcodingacademy.com/fullchain.pem" ]; then
                echo "Found main domain certificate. Checking if it covers API subdomain..."
                if openssl x509 -in /etc/letsencrypt/live/bengalcodingacademy.com/fullchain.pem -text -noout | grep -q "api.bengalcodingacademy.com"; then
                    echo "Main domain certificate covers API subdomain. Using it..."
                    sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;
                return 301 https://\$server_name\$request_uri;
            }

            server {
                listen 443 ssl http2;
                server_name api.bengalcodingacademy.com;

                ssl_certificate /etc/letsencrypt/live/bengalcodingacademy.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/bengalcodingacademy.com/privkey.pem;
                include /etc/letsencrypt/options-ssl-nginx.conf;
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
                else
                    echo "Main domain certificate doesn't cover API subdomain"
                    # Fall back to HTTP only for now
                    echo "Rate limit reached. Configuring HTTP only for now..."
                    sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
                fi
            elif [ -f "/etc/letsencrypt/live/api.bengalcodingacademy.com/fullchain.pem" ]; then
                echo "SSL certificate already exists for api.bengalcodingacademy.com"
                # Update Nginx config to include SSL
                sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;
                return 301 https://\$server_name\$request_uri;
            }

            server {
                listen 443 ssl http2;
                server_name api.bengalcodingacademy.com;

                ssl_certificate /etc/letsencrypt/live/api.bengalcodingacademy.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/api.bengalcodingacademy.com/privkey.pem;
                include /etc/letsencrypt/options-ssl-nginx.conf;
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
            else
                echo "No SSL certificate found for api.bengalcodingacademy.com"
                echo "Attempting to create SSL certificate..."
                # First, ensure the HTTP config is working
                sudo nginx -t && sudo systemctl reload nginx
                
                # Create SSL certificate with rate limit handling
                if sudo certbot --nginx -d api.bengalcodingacademy.com --non-interactive --agree-tos --email admin@bengalcodingacademy.com 2>&1 | grep -q "too many certificates"; then
                    echo "Rate limit reached for Let's Encrypt. Configuring HTTP only for now."
                    echo "SSL certificate will be created after rate limit resets (check logs for exact time)"
                    sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
                else
                    echo "SSL certificate created successfully"
                fi
            fi

            # Start app with PM2
            pm2 stop backend-api || true
            pm2 delete backend-api || true

            # Create PM2 ecosystem file for better configuration
            cat > ecosystem.config.cjs <<EOL
            module.exports = {
              apps: [{
                name: 'backend-api',
                script: 'src/index.js',
                instances: 1,
                autorestart: true,
                watch: false,
                max_memory_restart: '1G',
                env: {
                  NODE_ENV: 'production',
                  PORT: '${{ secrets.PORT }}'
                },
                error_file: './logs/err.log',
                out_file: './logs/out.log',
                log_file: './logs/combined.log',
                time: true
              }]
            };
            EOL

            # Create logs directory
            mkdir -p logs

            # Start with ecosystem file
            pm2 start ecosystem.config.cjs
            pm2 save

            # Quick health check
            echo "Waiting for server to start..."
            sleep 5

            # Check PM2 status
            pm2 status

            # Simple health check with timeout
            echo "Testing server health..."
            if timeout 10s curl -f -s http://localhost:${{ secrets.PORT }}/api/health > /dev/null; then
              echo "✅ Health check passed!"
            else
              echo "❌ Health check failed - checking logs..."
              pm2 logs backend-api --lines 10
              exit 1
            fi

            # Setup auto-renew for certs
            echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -

            # Final health check
            echo "Final health check..."
            echo "Testing HTTP endpoint..."
            if curl -f -s http://api.bengalcodingacademy.com/api/health > /dev/null; then
              echo "✅ HTTP endpoint working correctly!"
            else
              echo "❌ HTTP endpoint test failed"
            fi

            echo "Testing HTTPS endpoint..."
            if curl -f -s https://api.bengalcodingacademy.com/api/health > /dev/null; then
              echo "✅ HTTPS endpoint working correctly!"
            else
              echo "⚠️ HTTPS endpoint test failed - this is expected if rate limit was reached"
              echo "API is working on HTTP. HTTPS will be available after rate limit resets."
            fi

            echo "=== Deployment Summary ==="
            echo "✅ API is accessible at: http://api.bengalcodingacademy.com/api/health"
            echo "⚠️ HTTPS will be available after Let's Encrypt rate limit resets"
            echo "📅 Rate limit resets after: 2025-09-22 11:11:38 UTC (check certbot logs for exact time)"

            echo "=== Deployment Summary ==="
            echo "✅ API is accessible at: http://api.bengalcodingacademy.com/api/health"
            echo "⚠️ HTTPS will be available after Let's Encrypt rate limit resets"
            echo "📅 Rate limit resets after: 2025-09-22 11:11:38 UTC (check certbot logs for exact time)"

            echo "=== Deployment Summary ==="
            echo "✅ API is accessible at: http://api.bengalcodingacademy.com/api/health"
            echo "⚠️ HTTPS will be available after Let's Encrypt rate limit resets"
            echo "📅 Rate limit resets after: 2025-09-22 11:11:38 UTC (check certbot logs for exact time)"

            echo "=== Backend Deployed Successfully ==="
