name: Deploy Backend to DigitalOcean

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Copy files to DigitalOcean
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          source: "./**"
          target: "~/backend-app"
          timeout: 300s
          command_timeout: 300s

      - name: Setup and Deploy Backend on DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          timeout: 300s
          command_timeout: 300s
          script: |
            # Update system packages
            sudo apt-get update -y

            # Install Node.js if not installed
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install PM2 globally if not present
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm install -g pm2
            fi

            # Install Nginx & Certbot if not present
            sudo apt-get install -y nginx certbot python3-certbot-nginx

            # Go to backend directory
            cd ~/backend-app

            # Write environment variables
            cat > .env <<EOL
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PORT=${{ secrets.PORT }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            MAIL_FROM=${{ secrets.MAIL_FROM }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_BUCKET=${{ secrets.S3_BUCKET }}
            S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
            S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
            S3_PUBLIC_BASE=${{ secrets.S3_PUBLIC_BASE }}
            EOL

            # Install dependencies fresh
            npm ci

            # Generate Prisma client
            npx prisma generate --schema=prisma/schema.prisma

            # Run migrations in production-safe way
            npx prisma migrate deploy

            # Configure Nginx
            sudo tee /etc/nginx/sites-available/api.bengalcodingacademy.com <<EOL
            server {
                listen 80;
                server_name api.bengalcodingacademy.com;

                location / {
                    proxy_pass http://localhost:${{ secrets.PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/api.bengalcodingacademy.com /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl restart nginx

            # SSL certificate
            sudo certbot --nginx -d api.bengalcodingacademy.com --non-interactive --agree-tos --email ${{ secrets.EMAIL }} --redirect

            # Start app with PM2
            pm2 stop backend-api || true
            pm2 delete backend-api || true
            
            # Create PM2 ecosystem file for better configuration
            cat > ecosystem.config.cjs <<EOL
            module.exports = {
              apps: [{
                name: 'backend-api',
                script: 'src/index.js',
                instances: 1,
                autorestart: true,
                watch: false,
                max_memory_restart: '1G',
                env: {
                  NODE_ENV: 'production',
                  PORT: '${{ secrets.PORT }}'
                },
                error_file: './logs/err.log',
                out_file: './logs/out.log',
                log_file: './logs/combined.log',
                time: true
              }]
            };
            EOL
            
            # Create logs directory
            mkdir -p logs
            
            # Start with ecosystem file
            pm2 start ecosystem.config.cjs
            pm2 save

            # Wait for server to be ready
            echo "Waiting for server to start..."
            sleep 10
            
            # Check if server is running
            pm2 status
            
            # Check PM2 logs for any startup errors
            echo "Checking PM2 logs for errors..."
            pm2 logs backend-api --lines 20 || echo "No logs available yet"
            
            # Check if the port is being used
            echo "Checking if port is in use..."
            netstat -tlnp | grep :${{ secrets.PORT }} || echo "Port not found in netstat"
            
            # Check process details
            echo "Checking process details..."
            ps aux | grep node || echo "No node processes found"
            
            # Test server connectivity with retry logic
            echo "Testing server connectivity..."
            for i in {1..5}; do
              echo "Attempt $i/5..."
              if curl -f -s http://localhost:${{ secrets.PORT }}/ > /dev/null; then
                echo "✅ Basic connectivity test passed!"
                break
              else
                echo "❌ Basic connectivity test failed, retrying in 5 seconds..."
                sleep 5
              fi
            done
            
            # Test health endpoint
            echo "Testing health endpoint..."
            for i in {1..3}; do
              echo "Health check attempt $i/3..."
              if curl -f -s http://localhost:${{ secrets.PORT }}/api/health > /dev/null; then
                echo "✅ Health check passed!"
                break
              else
                echo "❌ Health check failed, retrying in 3 seconds..."
                sleep 3
              fi
            done
            
            # Final connectivity tests with detailed output
            echo "Final connectivity tests:"
            echo "1. Root endpoint:"
            curl -v http://localhost:${{ secrets.PORT }}/ || echo "Root endpoint failed"
            echo "2. Health endpoint:"
            curl -v http://localhost:${{ secrets.PORT }}/api/health || echo "Health endpoint failed"

            # Setup auto-renew for certs
            echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -

            echo "=== Backend Deployed Successfully ==="
